/* analysis.h
 *
 * Copyright (C) 2016 freyr <sky_rider_93@mail.ru> 
 *
 * This file is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as 
 * published by the Free Software Foundation; either version 3 of the 
 * License, or (at your option) any later version. 
 *
 * This file is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
 * Lesser General Public License for more details. 
 * 
 * You should have received a copy of the GNU General Public License 
 * along with this program.  If not, see <http://www.gnu.org/licenses/>. 
*/

#ifndef ANALYSIS_H
#define ANALYSIS_H

#include "videodata.h"
#include "block.h"
#include <stdlib.h>
#include <math.h>

#define WHT_LVL 210
#define BLK_LVL 40
#define WHT_DIFF 6
#define GRH_DIFF 2
#define KNORM 4.0
#define L_DIFF 5

#define DECLARE_COEFS()							\
  static const guint wht_coef[20] = {WHITE_COEFS_TEMPLATE};		 \
  static const guint ght_coef[20] = {GREY_COEFS_TEMPLATE};

#define MAX(A,B)\
  ({__typeof__(A) _A = (A);			\
    __typeof__(B) _B = (B);			\
    _A > _B ? _A : _B;})

#define GET_COEF(NOISE, ARRAY)			\
  ({guint ret_val;				\
    if((NOISE>100) || (NOISE<0))		\
      ret_val = 0;				\
    else 					\
      ret_val = ARRAY[NOISE/5];			\
    ret_val;					\
  })


DECLARE_COEFS()

inline void
analyse_buffer(guint8* data,
	       guint8* data_prev,
	       guint stride,
	       guint width,
	       guint height,
	       guint black_bnd,
	       guint freez_bnd,
	       guint mark_blocks,
	       BLOCK *blocks,
	       float rval[PARAM_NUMBER])
{
  guint w_blocks = width / 8;
  guint h_blocks = height / 8;
  
  long brightness = 0;
  long difference = 0;
  guint black = 0;
  guint frozen = 0;
  guint blc_counter = 0;
  
  for (guint j = 0; j < height; j++)
    for (guint i = 0; i < width; i++) {
      int ind = i + j*stride;
      guint8 current = data[ind];
      guint8 diff = 0;

      /* eval-ting blocks inner noise */
      if(((i+1)%8) && ((j+1)%8) &&
	 ((i+2)%8) && ((j+2)%8) &&
	 (i%8) && (j%8)) {
	guint8 lvl;
	guint blc_index = (i/8) + (j/8)*w_blocks;
	BLOCK *blc = &blocks[blc_index];
	/* resetting block data */
	if ((i%8 == 1) && (j%8 == 1)) {
	  blc->noise = 0.0;
	  blc->down_diff = 0;
	  blc->right_diff = 0;
	}
	/* setting visibility lvl */
	if ((current < WHT_LVL) && (current > BLK_LVL))
	  lvl = GRH_DIFF;
	else
	  lvl = WHT_DIFF;
	if (abs(current - data[ind+1]) >= lvl)
	  blc->noise += 1.0/(6.0*5.0*2.0);
	if (abs(current - data[ind+stride]) >= lvl)
	  blc->noise += 1.0/(6.0*5.0*2.0);
      }
      /* eval-ting brightness, freeze and diff */
      brightness += current;
      black += (current <= black_bnd) ? 1 : 0;
      if (data_prev != NULL){
	guint8 current_prev = data_prev[ind];
	diff = abs(current - current_prev);
	difference += diff;
	frozen += (diff <= freez_bnd) ? 1 : 0;
	data_prev[ind] = current;
      }
    }

  /* eval-ting borders diff */
  for (guint j = 0; j < h_blocks-1; j++)
    for (guint i = 0; i < w_blocks-1; i++) {
      guint blc_index = i + j*w_blocks;
      int ind = (i*8) + (j*8)*stride;

      guint h_noise = 100.0 * MAX(blocks[blc_index].noise, blocks[blc_index+1].noise);
      guint v_noise = 100.0 * MAX(blocks[blc_index].noise, blocks[blc_index+w_blocks].noise);
      guint h_wht_coef = GET_COEF(h_noise, wht_coef);
      guint h_ght_coef = GET_COEF(h_noise, ght_coef);
      guint v_wht_coef = GET_COEF(v_noise, wht_coef);
      guint v_ght_coef = GET_COEF(v_noise, ght_coef);

      for (guint orient = 0; orient <= 1; orient++) /* 0 = horiz, 1 = vert */ 
	for (guint pix = 0; pix < 8; pix++) {
	  guint8 pixel, next, next_next, prev;
	  guint coef;
	  float denom = 0;
	  float norm = 0;
	  /* pixels */
	  pixel = data[ind + 8*(orient?stride:1) + pix*(orient?1:stride)];
	  next = data[ind + 8*(orient?stride:1) + pix*(orient?1:stride) - (orient?stride:1)];
	  next_next = data[ind + 8*(orient?stride:1) + pix*(orient?1:stride) - (orient?(2*stride):2)];
	  prev = data[ind + 8*(orient?stride:1) + pix*(orient?1:stride) + (orient?stride:1)];
	  /* coefs */
	  if ((pixel < WHT_LVL) && (pixel > BLK_LVL))
	    coef = orient ? v_ght_coef : h_ght_coef;
	  else
	    coef = orient ? v_wht_coef : h_wht_coef;
	  /* eval */
	  denom = roundf((float)(abs(prev - pixel) + abs(next - next_next))/KNORM);
	  norm = (float)abs(next - pixel) / (denom == 0 ? 1 : denom);
	  if (norm > coef) {
	    if (orient == 0)
	      blocks[blc_index].right_diff += 1;
	    else
	      blocks[blc_index].down_diff += 1;
	  }
	}
    }
  /* counting visible blocks */
  for (guint j = 1; j < h_blocks-1; j++) 
    for (guint i = 1; i < w_blocks-1; i++) {
      guint loc_counter = 0;
      BLOCK* cur = &blocks[i + j*w_blocks];
      BLOCK* upp = &blocks[i + (j-1)*w_blocks];
      BLOCK* lef = &blocks[(i-1) + j*w_blocks];
      if (cur->down_diff > L_DIFF)
	loc_counter += 1;
      if (cur->right_diff > L_DIFF)
	loc_counter += 1;
      if (lef->right_diff > L_DIFF)
	loc_counter += 1;
      if (upp->down_diff > L_DIFF)
	loc_counter += 1;
      if (loc_counter >= 2)
	blc_counter += 1;
      /* mark block if visible */
      if (mark_blocks && (loc_counter >= 2)) {
	guint left_upper_corner = 8*i + 8*j*stride;
	for (guint p = 0; p < 8; p++) {
	  /* first row */
	  data[left_upper_corner + p] = 255;
	  /* 8-th row */
	  data[left_upper_corner + stride*7 + p] = 255;
	  /* first column */
	  data[left_upper_corner + p*stride] = 255;
	  /* 8-th column */
	  data[left_upper_corner + p*stride + 8] = 255;
	}
      }
    }
  
  rval[BLOCKY] = ((float)blc_counter*100.0) / ((float)(w_blocks-2)*(float)(h_blocks-2));
  rval[LUMA]   = (float)brightness / (height*width);
  rval[BLACK]  = ((float)black/((float)height*(float)width))*100.0;
  rval[DIFF]   = (float)difference / (height*width);
  rval[FREEZE] = (frozen/(height*width))*100.0;
}

#endif /* ANALYSIS_H */
